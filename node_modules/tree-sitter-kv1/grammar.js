module.exports = grammar({
  name: 'KV1',

  rules: {
    // TODO: add the actual grammar rules
    source_file: $ => repeat($._expression),

	_expression: $ => choice(
		$.version_statement,
		$.header,
		$.comment,
		$.variable,
		$.matrix,
		$.vert_statement
	),

	//TODO: Actually impliment header
	header: $ => seq(
		'#HEADER',
		$.header_text,
        '#HEADER'
	),

	//From: https://github.com/tree-sitter/tree-sitter-c/blob/master/grammar.js
    comment: $ => token(choice(
    	seq('//', /(\\(.|\r?\n)|[^\\\n])*/),
    	seq(
        	'/*',
        	/[^*]*\*+([^/*][^*]*\*+)*/,
        	'/'
    	)
    )),


	variable: $ => seq(
        $.var_type,
        $.identifier,
        $.var_value,
        optional(';')
    ),

	matrix: $ => seq(
        $.mat_type,
        $.identifier,
        $.mat_value,
        optional(';')
    ),

    var_type: $ => choice(
        'd',
        's',
        'b'
    ),

    mat_type: $ => choice(
        'm<d>',
        'm<s>',
        'm<b>'
    ),

    var_value: $ => choice(
        $.number,
        $.string,
        $.bool
    ),

    mat_value: $ => seq(
        '[',
        repeat(choice($.var_value, ',')),
        ']'
    ),

    //TODO: Actually impliment vertical statement
	vert_statement: $ => '#VERTICAL',

	version_statement: $ => seq(
		'#VERSION',
		$.number
	),

	header_text: $ => /[^#]*?/,

    identifier: $ => /[a-zA-Z_$][a-zA-Z_$0-9]*/,

    bool: $ => choice(
        /true/,
        /false/
    ),

    string: $ => /\"[^\"]*\"/,

	number: $ => /[+-]?([0-9]*[.])?[0-9]+/

  }
});
